class Dsu {
public:
    vector<int> parent, size;
    Dsu(int n) {
        parent.resize(n + 1);
        size.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findUp(int node) {
        if (node == parent[node]) return node;
        return parent[node] = findUp(parent[node]);
    }

    void RankBySize(int u, int v) {
        int ult_u = findUp(u);
        int ult_v = findUp(v);
        if (ult_u == ult_v) return;
        if (size[ult_u] < size[ult_v]) {
            parent[ult_u] = ult_v;
            size[ult_v] += size[ult_u];
        } else {
            parent[ult_v] = ult_u;
            size[ult_u] += size[ult_v];
        }
    }
};

class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        int n = accounts.size();
        unordered_map<string, int> mp;
        Dsu ds(n);

        for (int i = 0; i < n; i++) {
            for (int j = 1; j < accounts[i].size(); j++) {
                string mail = accounts[i][j];
                if (mp.find(mail) == mp.end()) {
                    mp[mail] = i;
                } else {
                    ds.RankBySize(i, mp[mail]);
                }
            }
        }

        vector<vector<string>> mrgd(n);
        for (auto it : mp) {
            string mail = it.first;
            int node = ds.findUp(it.second);
            mrgd[node].push_back(mail);
        }

        vector<vector<string>> ans;
        for (int i = 0; i < n; i++) {
            if (mrgd[i].size() == 0) continue;
            sort(mrgd[i].begin(), mrgd[i].end());
            vector<string> temp;
            temp.push_back(accounts[i][0]);
            for (auto it : mrgd[i]) {
                temp.push_back(it);
            }
            ans.push_back(temp);
        }
        return ans;
    }
};
